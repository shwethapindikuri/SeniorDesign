///<reference path="./jaydata.d.ts" />

/*//////////////////////////////////////////////////////////////////////////////////////
////// Autogenerated by JaySvcUtil.exe http://JayData.org for more info        /////////
//////                      oData  V1  TypeScript                              /////////
//////////////////////////////////////////////////////////////////////////////////////*/


declare module DeviceManagerService {
  export class Connection extends $data.Entity {
    constructor();
    constructor(initData: { ID?: number; ConnectionTypeID?: number; BaudRate?: number; DataBits?: number; StopBits?: number; Parity?: string; RTSCTS?: number; DTR?: bool; RTS?: bool; XonXoff?: bool; PhoneNumber?: number; ATString?: string; IPAddress?: string; PortNumber?: number; Devices?: DeviceManagerService.Device[]; ConnectionType?: DeviceManagerService.ConnectionType; });
    ID: number;
    ConnectionTypeID: number;
    BaudRate: number;
    DataBits: number;
    StopBits: number;
    Parity: string;
    RTSCTS: number;
    DTR: bool;
    RTS: bool;
    XonXoff: bool;
    PhoneNumber: number;
    ATString: string;
    IPAddress: string;
    PortNumber: number;
    Devices: DeviceManagerService.Device[];
    ConnectionType: DeviceManagerService.ConnectionType;
    
  }
  
  export class Node extends $data.Entity {
    constructor();
    constructor(initData: { ID?: number; ParentID?: number; DeviceID?: number; FolderID?: number; Nodes?: DeviceManagerService.Node[]; Node1?: DeviceManagerService.Node; Device?: DeviceManagerService.Device; Folder?: DeviceManagerService.Folder; });
    ID: number;
    ParentID: number;
    DeviceID: number;
    FolderID: number;
    Nodes: DeviceManagerService.Node[];
    Node1: DeviceManagerService.Node;
    Device: DeviceManagerService.Device;
    Folder: DeviceManagerService.Folder;
    
  }
  
  export class ConnectionType extends $data.Entity {
    constructor();
    constructor(initData: { ID?: number; Name?: string; Connections?: DeviceManagerService.Connection[]; });
    ID: number;
    Name: string;
    Connections: DeviceManagerService.Connection[];
    
  }
  
  export class Device extends $data.Entity {
    constructor();
    constructor(initData: { ID?: number; Name?: string; DeviceTypeID?: number; ConnectionID?: number; Description?: string; SerialNumber?: string; FirmwareRevision?: string; PartNumber?: string; FIDString?: string; Nodes?: DeviceManagerService.Node[]; DeviceDocuments?: DeviceManagerService.DeviceDocument[]; Connection?: DeviceManagerService.Connection; DeviceType?: DeviceManagerService.DeviceType; });
    ID: number;
    Name: string;
    DeviceTypeID: number;
    ConnectionID: number;
    Description: string;
    SerialNumber: string;
    FirmwareRevision: string;
    PartNumber: string;
    FIDString: string;
    Nodes: DeviceManagerService.Node[];
    DeviceDocuments: DeviceManagerService.DeviceDocument[];
    Connection: DeviceManagerService.Connection;
    DeviceType: DeviceManagerService.DeviceType;
    
  }
  
  export class DeviceDocument extends $data.Entity {
    constructor();
    constructor(initData: { ID?: number; Name?: string; Data?: Uint8Array; DeviceID?: number; Description?: string; Device?: DeviceManagerService.Device; });
    ID: number;
    Name: string;
    Data: Uint8Array;
    DeviceID: number;
    Description: string;
    Device: DeviceManagerService.Device;
    
  }
  
  export class DeviceType extends $data.Entity {
    constructor();
    constructor(initData: { ID?: number; Name?: string; CanHaveChildren?: bool; Devices?: DeviceManagerService.Device[]; });
    ID: number;
    Name: string;
    CanHaveChildren: bool;
    Devices: DeviceManagerService.Device[];
    
  }
  
  export class Folder extends $data.Entity {
    constructor();
    constructor(initData: { ID?: number; Name?: string; Nodes?: DeviceManagerService.Node[]; FolderDocuments?: DeviceManagerService.FolderDocument[]; });
    ID: number;
    Name: string;
    Nodes: DeviceManagerService.Node[];
    FolderDocuments: DeviceManagerService.FolderDocument[];
    
  }
  
  export class FolderDocument extends $data.Entity {
    constructor();
    constructor(initData: { ID?: number; Name?: string; Data?: Uint8Array; FolderID?: number; Description?: string; Folder?: DeviceManagerService.Folder; });
    ID: number;
    Name: string;
    Data: Uint8Array;
    FolderID: number;
    Description: string;
    Folder: DeviceManagerService.Folder;
    
  }
  
  export class DeviceDatabaseClassesDataContext extends $data.EntityContext {
    onReady(): $data.IPromise;
    onReady(handler: (context: DeviceDatabaseClassesDataContext) => void): $data.IPromise;
    
    Connections: $data.EntitySet<DeviceManagerService.Connection>;
    Nodes: $data.EntitySet<DeviceManagerService.Node>;
    ConnectionTypes: $data.EntitySet<DeviceManagerService.ConnectionType>;
    Devices: $data.EntitySet<DeviceManagerService.Device>;
    DeviceDocuments: $data.EntitySet<DeviceManagerService.DeviceDocument>;
    DeviceTypes: $data.EntitySet<DeviceManagerService.DeviceType>;
    Folders: $data.EntitySet<DeviceManagerService.Folder>;
    FolderDocuments: $data.EntitySet<DeviceManagerService.FolderDocument>;
    GetDevicesByName: {
      (name: string): $data.Queryable<DeviceManagerService.Device>;
      (params?: { name?: string; }): $data.Queryable<DeviceManagerService.Device>;
      (name: string, handler: (result: DeviceManagerService.Device[]) => void): $data.IPromise;
      (params: {name?: string; }, handler: (result: DeviceManagerService.Device[]) => void): $data.IPromise;
      (handler: (result: DeviceManagerService.Device[]) => void): $data.IPromise;
    };
    GetDevicesById: {
      (id: number): $data.Queryable<DeviceManagerService.Device>;
      (params?: { id?: number; }): $data.Queryable<DeviceManagerService.Device>;
      (id: number, handler: (result: DeviceManagerService.Device[]) => void): $data.IPromise;
      (params: {id?: number; }, handler: (result: DeviceManagerService.Device[]) => void): $data.IPromise;
      (handler: (result: DeviceManagerService.Device[]) => void): $data.IPromise;
    };
    
  }

}
